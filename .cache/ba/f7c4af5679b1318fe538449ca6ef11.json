{"id":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","dependencies":[{"name":"/home/leiki/Workspace/my_studies/alura/frontend/mylib-bookproject/example/package.json","includedInParent":true,"mtime":1672925930559},{"name":"/home/leiki/Workspace/my_studies/alura/frontend/mylib-bookproject/example/node_modules/react-app-polyfill/node_modules/core-js/package.json","includedInParent":true,"mtime":1672926062315},{"name":"../internals/math-trunc","loc":{"line":1,"column":20},"parent":"/home/leiki/Workspace/my_studies/alura/frontend/mylib-bookproject/example/node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","resolved":"/home/leiki/Workspace/my_studies/alura/frontend/mylib-bookproject/example/node_modules/react-app-polyfill/node_modules/core-js/internals/math-trunc.js"}],"generated":{"js":"var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}}],"sources":{"node_modules/react-app-polyfill/node_modules/core-js/internals/to-integer-or-infinity.js":"var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"lineCount":10}},"error":null,"hash":"96144e517c32c7b5202c4550e35d8c6c","cacheData":{"env":{}}}